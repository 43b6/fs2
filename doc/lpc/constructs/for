* LPC 的 for 回圈.

LPC 的 for 回圈完全跟 C 语言的语法一样, 如下所述:

for (表示式-1; 表示式-2; 表示式-3) {
	叙述;
	...;
}

    其中的 表示式-1 是用来初始化 for 回圈. 也就是在回圈执行之前就
  先执行 表示式-1, 此后, 每做完一次回圈就先判断 表示式-2, 如果
  表示式-2 为真(成立)就继续下一次的回圈, 当然, 第一次以后的每个回圈
  在执行前会先执行 表示式-3.
    再说一次, 表示式-1 是第一次回圈执行前做的, 表示式-2 是在每次回圈
  结束前做的, 表示式-3 是第一次除外的回圈执行前做的. 其中, 表示式-2
  用来判断是不是要继续回圈, 如果 表示式-2 成立就继续执行.

    如果在回圈内执行到 break, 则强迫停止该回圈, 并跳出该回圈, 如果执行
  到 continue, 则停止该"次"回圈, 并继续下一次回圈.

    底下有一个典型的 for 回圈.

	int i;

	for (i = 0; i < 10; i++) {
	  write("i == " + i + "\n");
	  write("10 - i == " + (10 - i) + "\n");
	}
