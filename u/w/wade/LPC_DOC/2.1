第二章  第一节：开始使用 LPC

    最标准的 C(或几乎所有其他语言)的第一个程式都是印出 "Hello world." 讯息。
但是在此得先告诉读者，因为 Mud 可以说是以「物件”为出发点，所以要先学会一
般的物件长什么样子，我们以底下来自 MudOS 的 ESII mudlib 及 DGD 的 2.4.5 mudlib
的例子当说明。

======= MudOS 的 ESII mudlib ===============================================
  1  inherit ROOM;
  2  create()
  3  {
  4    // 这个物件只是用来当解说范例，虽然是个真正的物件，但是几乎没有任何功能
  5    set ("short","考试居");
  6    set ("long","考试的地方\n");
  7    setup();
  8  }
============================================================================

======= DGD 的 2.4.5 mudlib ================================================
  1  reset(arg) {
  2    short_desc = "考试居";
  3    long_desc = "考试的地方\n";
  4  }
============================================================================

前面的数字是行号，是笔者在系统的 edit() 命令下 set number 得到的，做为解释
用，请不必照打进去。

  第一个例子中，第一行是 MudOS 特有的，甚至可以说是 ESII mudlib 专属的，很
明显的，在 DGD 的 mudlib(2.4.5) 中就看不到，「inherit”是「继承”物件的意思，
后面会详述，此处的意思是说，「本物件是一个‘房间’”。

  第一个例子中只看到第二行的 create() 函数，这也是 MudOS 对所有物件的进入点，
其作用有点像 C 语言的 main()，也就是 driver 要执行本物件的程式的话，就从此处
开始，其他函数只是用来「被呼叫”的罢了，至于函数，后面的章节会详述。相同的，
  DGD 不是用 create() 当启始，而是用 reset()，其作用大致相同于 create()，只
是 reset() 在 MudOS 中也有，但其作用不是用作进入点，而是每个重设时间一到，
系统自动呼叫 reset() 用重设物件用的(DGD 也有此功能，兼作进入点而已)。

  看完上面最简单的物件写法，我们才有法子继续讨论 LPC 写作。在以后的例子里，
笔者只针对 ESII mudlib 提出例子讨论。

  第三行的 { 在此先不说明，读者先照抄就行了，第四行是一个 C++ 的标准「注释”，
也就是 driver 并不会对注释内容作任何解释，注释的开头「//”可以在任何地方(注：
在 printf 内的话不在此限)。其实， LPC 除了双斜线开头当注解外，也支援一般 C
语言的 /* .........  */ 成对所括起来的方式当注释，后面这种方式是可以跨跃多行
的，而前面的双斜线则只能一行(也就是双斜线后面的才是注解)。

  不知道读者有没有注意到，几乎每一行有文字的叙述最后都有一个分号「;”？这是
跟 C 一样的语法，做为该叙述的结尾。至于什么叫叙述？为什么要有分号？简述如下：
  对 driver 来说一个的叙述才算是一个完整的指令，为了告诉 driver 这个指令到哪
里结束，因此需要分号来分隔不同的叙述，因此，分号在 LPC 中应该看成叙述的一部
份，所以上述的程式才会长那样子。

  第二行的 create() 可以看成是函数的名称，由于所有 LPC 物件都要有此函数，因
此本函数算是最常见的函数。

  最后，LPC 的格式就如同 C 语言一样的自由，叙述的分隔只靠分号，致使每个人写
出来相同的码也许看起来会差很多。以本例来说，底下的写法是完全一样的，只是大
概读者还是会较喜欢前面的写法吧！

===========================================================================
  inherit ROOM; create() {
    // 这个物件只是用来当解说范例，虽然是个真正的物件，但是几乎没有任何功能
    set("short","考试居"); set("long","考试的地方\n"); setup(); }
===========================================================================

    底下有几点原则性的建议，详情请见其他程式写作书籍：

  ． 同一个叙述尽量写在同一行中，换句话说，一行只写一个叙述就好。
  ． 函数的开始与结束的大括号各自占有一行(如前例)
  ． 函数内的程式码要利用空白或定位字元(Tab)来排「称为内缩”，以增加美观。
  ． 接在函数名称后面的左右小括号不需要空白，其他地方的函数名称后面则建议
     加个空白。
  ． 尽量把注解写进去，不要以为你看得懂，第一，你过几天来看也许就忘了当初
     为什么这样写，第二，你的程式码别人也可能需要看(甚至需要别人改正错误)。
  ． 不止要写注解，还要写清楚，理由同前。
  ． 注解通常出现在档案前面，说明谁写的，谁做了哪些更动，有哪些函数等等
  ． 注解通常出现在函数的前面说明该函数用途、使用的参数个数及型态、传回值型态
  ． 注解通常在定义变数时说明该变数的用途。
  ． 注解通常出现在叙述区块中，说明该区块的用途。
  ． 过多的注解反而失去程式美观。
  ． 函数、变数等的命名要简单易懂。
