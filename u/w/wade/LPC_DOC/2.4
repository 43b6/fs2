第二章  第四节：LPC 函数

    函数是撰写 LPC 程式最重要的元素之一。函数在 LP mud 中大致上分成几种，
efuns, simul efuns, local funs 等，在后面会详谈，此处先简单说一下：
  efuns 就是定义在 driver 中的，也可以看成最基本的函数，也就是理论上所有
地方(物件或程式)中都可以呼叫到的，基本上 efuns 是最快的(相对于其他同功能的)，
simul efuns 的存在是因为 driver 提供的(或称为系统提供的)函数通常没有做任何
检查或记录，所以才需要「再定义”同名的函数。不过，还不止这个原因，simul efuns
也补足 efuns 缺少的功能，甚至提供 efuns 没有的函数。至于 local funs 是定义在
物件中的函数称之，但是不是每一个物件中的函数都可以被的物件呼叫，以后会说明。
    函数在执行后可以传回值，也可以不传，端视其资料型态而定，底下先介绍
 常见的 几个无传回值的函数：
    void init(), void reset(), void create()

    其中后两者于前面的章节已经见过，在此特别着重 void 型别，在后面的资料型态
会再介绍。void 代表函数不需传回值，所以函数在结束的地方直接以 return; 来结束
即可。底下举个实例：

====================================================================
#include "std.h"

int lamp_is_lit, reboot_time, time_from_reset, last_reset_cycle;
int list_length;

void reset(string arg)
{
    if (time_from_reset)
        last_reset_cycle = time() - time_from_reset;
    time_from_reset = time();
    if (arg)
        return;
    set_light(1);
    reboot_time = time();
}
=====================================================================

  reset() 函数会由系统定期呼叫，有些动作就不必每次都作，所有上例有个 return;
的叙述，只有第一次呼叫才会执行 set_light(1); 后面的动作。
  上例还有个需要注意的地方，也些版本的 LPC driver 对 void 型态的函数，可以忽
略 void 不写，亦即 void reset() 可以直接写成 reset() 的格式。

  其实，一般来说，最常看见的函数几乎均没有传回值，但是对「命令”来说，又可以
说是「一定”要有传回值，因为命令的搜寻如果没有传回值或传回 0 的话，就视为
该命令失败。底下再举例说明命令与传回值，下面的例子，可以是写在房间或其他
「物件”中，当使用者下「help”命令时，add_action() 就会将此命令对应到 do_help()
函数上，也就是说，当 help 命令发生时，系统会呼叫 do_help() 来完成。而本命令到
底算「完成”了没？则视传回值是不是 0, 以底下的例子而言，都算完成了，因为
notify_fail() 会先印出讯息之后传回非 0 值。

=====================================================================
void init()
{
  add_action("do_help", "help");
}

int do_help(string arg)
{
    if (!arg || arg == "")
      return notify_fail ("本辅助讯息要有参数才行！\n");
    else
      return 1;
}
=====================================================================

  进一步讨论命令的话，提供一个作弊的机制，对 mudlib 提供的命令里，
我们可以在物件中的 add_action() 设定一个相同的命令来拦截，在做完我
们要做的事之后，再传回 0, 代表本命令无效的假象，系统就会继续找到
 mudlib 提供的命令，这样看来不但做了我们的要做的事，也会继续做系统
提供的命令。

  我们一直没有提一件事，函数的宣告里，就以上例来说明好了，传回值是 int, 
而参数 arg 又宣告成 string, 当我们在呼叫时，如果函数定义是在呼叫后面的话，
那系统如何完成我们的呼叫？也就是说，在系统还不知道我们呼叫的函数长相如何
之前，我们的呼叫对或错如何判定？为了这件事，我们需事先定义「函数原型”来
告知系统。在还没说明什么是函数原型前，先说说为什么不直接在函数呼叫之前就定
义函数，而一定要用函数原型。首先，最简单有力的说明是，在像「递回”呼叫时，
在函数还没写完之前，就要呼叫函数本身，此时系统还不知道函数长相，如果有了
函数原型就好办事了(这一点在  LPC 中不会发生问题)。另一个原因也许读者不认同，
就是函数原型定义在前面的话，比较不会有定义与呼叫不符的情形发生。
  好了，现在说说什么是函数原型吧：
  其实很简单，就是把函数长相先写下来，而不写其函数「内容”，举例来说：

=======================================================================

	.
	.
	.
int help (string arg);		<-- 有没有看到分号？后面说明。
	.
	.
int xxx (ooo ###)		<-- 某函数就是了
{
	.
	.
  if (something wrong)
    return help (....);		<-- 在此处呼叫 help() 但是 help() 定义在后面
	.
	.
}

int help (string arg)
{
  write (@HELP
	.
	.
HELP);
  return 1;
}
=======================================================================

    通常，写程式的人会有自己的习惯，把像 create(), init() 这种函数
摆在最前面，这样的话比较好找，而把其他函数定义在后面，此时就需要
使用函数原型。第三种使用函数原型的理由，也是非常重要的理由就是：
    一个完整的物件也许分散在不同地方，最理想的方式就是用 #include 的方
式函数原型定义在某个 /include/xxxx.h 中。
    至于什么是 #include 后面会再提到。
