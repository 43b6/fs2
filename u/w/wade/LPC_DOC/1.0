第一章：进入 LPC


  谈到 LPC 就要谈 MUD, 但是本书不是谈 Mud 的书，如果要对 Mud 有所了解，
请读者参考附录，自己取得任何一个 LPmud 相容的 mud driver 来架设，最简单
的方式是，请读者连至国内各大 mud 站实际去经验一下，底下是一份国外 Mud 
相关的资源：

  FTP:
    ftp://ftp.imaginary.com/pub/LPC/servers/MudOS/

FTP MIRRORS:
    ftp://aragorn.uio.no/pub/LPC/servers/MudOS/

WWW:
    http://www.imaginary.com/
    http://www.imaginary.com/~beek/mudos/

EMAIL:
    majordomo@imaginary.com
        主题就填入：subscribe mudos-bugs
        或在信件内容中写：subscribe mudos-patches

  国内最流行的 Mud 大都建立在 annihilator 的 ESII mudlib 上，请见
    http://es2.muds.net/

  至于国内 mud 的列表，则见各大 BBS 的 mud 讨论区中，也许要翻翻精华区


  因为本书主要谈论的对象是以 MudOS 为环境的 ESII mudlib, 所以底下先谈谈
一个常见的名词：driver, 中文翻译为驱动程式(在此只是暂译，后面还是用 driver)

    MudOS 驱动程式本身是一个程式, (为了 LP mud, 用 C 写的) 它
提供了使 mud 成为可能的最低阶的支援, 驱动程式做了下列的事情:

0) 透过某个通讯阜的建立, 接受玩家从不同机器连线, 并且把这些连线对应到
   物件(以 tmi 为例, 是 /adm/daemons/logind.c)

1) 提供一组额外的系统函数, 称之为 efuns, 这些函数可以让所以物件呼叫.

2) 透过 new(物件档名) 或 clone_object(物件档名) 把 LPC 写成的档案载入
   记忆体中, 并且转换成较省空间的内部符号(一种中间档).

3) 解释(执行)这些以中间符号表示的物件, 其执行命令的方式如下:

   a) 驱动程式从通讯阜接受玩家的命令, 并呼叫相对应的函数(定义在某物件中).
      这些函数通常是由 add_action(函数名称, 命令名称) 把命令跟定义在物件中
      的函数对应起来. 驱动程式也会呼叫物件中特定的函数(通常是 efun), 如:
      init, create, clean_up 等等.
   b) 物件也可以透过 call_other(物件, 函数名称, 参数, ...) 来呼叫定义
      在其他物件上的函数, call_other() 的变形是: 物件->函数名称(参数, ...)

4) MudOS 驱动程式 至少做了写列事情:
   a) 提供 LPC 的编译器, 编译并载入物件.
   b) 允许多使用者同时连线, 并且管理记忆体与这些连线.
   c) 提供一堆系统函数, 称为 efun, 给 mud 中的所有物件使用.


  再次因为本书虽然是讨论 LPC 这样的字眼，但是适用对象主要是 MudOS 的使用群，
所以再谈谈 MudOS 的演进：

  早期的 MudOS 是以 0.9.xx.xx 来标明的，自从 0.9.20 以后全面改为 v20.xx
前面的数字代表 major version，后面的数字代表 minor version，alpha/beta
版则在后面加上 a 或 b 及版本数字。
测试版的 driver release 的速度相当的快，大约每一至二星期就
会有新的版本，所有有关 MudOS driver 的讨论，公告事项都可以在 Idea
Exchange 里找到 (ie.imaginary.com 7890)。一般来说, alpha 版的 driver
都有些新增的功能，而 beta 版则多半是 bug fix，所有新增或修改的相关
资料都可以在 ChangeLog.* 中查到。driver 的原始程式码可由
ftp.imaginary.com 取得，路径为 pub/LPC/servers/MudOS

  至于详细的安装步骤请看附录。
