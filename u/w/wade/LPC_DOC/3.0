第三章  资料处理

    可以想像的是，泥巴中需处理非常多的「资料”，几乎所有物件都跟资料有关，
因此，如何处理资料是很重要的课题。

    前面说到函数有传回值，所谓的传回值就是一种资料，底下先说明所有资料可以
用的「型态”或称之为「修饰子”。

========================================================================
                               LPC Basics
                     Written by Descartes of Borg
                            23 april 1993

                          Translated by Hanzo 1996年1月

  译注：本节引自 LPC Basics 第二章  LPC 的资料种类, 其版权宣告放在后面
  译注：本文是由 hanzo@Fantasy.Space 翻译的，谢谢 Borg 与 Hanzo

    现在, 你应该了解在 LPC 之中的物件 (objesct) 是由函数 (function)
  所组成. 而且那些函数放置的顺序是无所谓的. 游戏本身使用那些物件的方
  法是把那些物件档案读进记忆体, 需要用到时再呼叫 (call) 那些函数.
  如果你没有任何程式设计的经验, 你可以不知道函数是甚么, 或者什么叫做
  呼叫一个函数. 即使是有程式设计经验的人, 你也会对一个新加入的物件中
  的函数如何被游戏呼叫感到诧异. 在回答这些问题以前, 你需要知道资料种
  类的概念. 这是最无聊但也是最关键性的题目. 有 90% 的错误 (除了 {}
  () :) 放错位子之外) 跟不了解 LPC 资料种类有关. 所以忍受这章无聊的
  课题, 因为一旦你了解了, 你会发现程式写起来容易得多了.

    你可能已经知道电脑看不懂人类使用的文字和数字. 电脑只知道简单的零
  与一. 为了要执行你写程式的目标, 那些指令必须从文字数字改成零与一.

    不论你使用任何语言, 你会有变数 (variable) 可以操作. 那些变数在记
  忆体中储存资料 (data). 例如: 有个变数 x, 在程式中你可以使用叙述
  (statement) 像
     x = 65
  来设定一个值给 x. 设定了 x 的值之后, 你可以把 x 的值显示在银幕上:
     write(x+"\n");   (附注: \n 是一个换行的符号)
  或者可以设定值给其他的变数:
     y = x + 5;
  但是问题是电脑不知道 65 是什么, 对电脑而言, 二进位的 65 是:
     00000000000000000000000001000001
  可是电脑中 "A" 的预设值也是:
     00000000000000000000000001000001
  所以当你告诉电脑 write(x+"\n"); 之时, 必须告诉电脑你要的到底是 65
  还是 "A".

  这就是资料的种类. 在 LPC 中, 以上的例子需要先行被定义, 像:
     int x;
  这就告诉了电脑有关资料的种类, 所以在以上的例子中, x 就是 65 而不是
  其它种类的资料.

    刚刚提到的就是很基本的普通资料种类. 这一章的目的是要介绍 LPC 的资
  料种类. 大致来说, 资料种类是游戏的执行程式 (driver) 用来决定一个值
  在记忆体中使用及存在的方式.

    所有的 LPMud 执行程式包含以下的资料种类:
  int , string, object, int *, string *, mixed *, void
    有的执行程式有下列的资料种类:
  float, mapping, float *, mapping *, function, enum, struct, char

  基本的资料种类:
    最基本的资料种类是常见的 void. void 没有任何种类的值. 以 LPC 代号
  的观点来看, 最基本的两种资料种类是 int 跟 string.  int 是整数, 例如:
  1, 17, -42, 0, -10000023 都是 int.  string 是一个或多个文字. 例如:
  "a", "We are borg", "-42", "This is a string" 都是 string. string
  一定要被放在 "" 之间. 所以执行程式在碰到 -42 和 "-42" 时, 可以分辨
  它们的不同之处, 就像 x 是一个变数, "x" 是一个文字一般.

    当你决定要使用一个变数之时, 在执行任何步骤之前, 必须让执行程式知道
  此变数是属于何种资料种类, 然后才能被正确的使用和执行. 如何让执行程式
  知道变数的资料种类呢? 只需要把资料种类放在变数之前即可. 这个步骤称为
  "变数宣告" (declaring the variable). 例如:

  void add_two_and_two()
  {
    int x;
    int y;

    x = 2;
    y = x + x;
  }

    在函数的开头, 你就告诉值行程式有两个整数的变数. 宣告的重要性不只是
  让执行程式知道如何使用那些值, 而且也可以帮助执行程式更有效的使用记忆
  体. 宣告之后, 执行程式就准备足够的记忆体来储存 int, 但是却不够储存像
  string, obj 的资料 (因为它们需要较大的记忆体空间). 当执行程式把记忆
  体预留好以及知道如何操作之后, 就可以直接用代号来使用.

    我们现在只说明 int, string, void 三种, 把其它的资料种类留到以后再
  详加说明.

  结论:
    执行程式需要知道每一个变数的种类以及如何操作它们的值. 最简单的 lpc
  资料种类是 int, void, string. 变数种类不能是 void(有 mixed 可以让驱
  动程式不检查型态) 只有函数可以是 void 来表示函数不传回值. 因为不同种
  类的变数需要不同大小的记忆体空间, 以及不同的操作方式 (例如: +,-,*,/ ...) ,
  因此对执行程式而言有不同的意义. 例如:  5+5, 执行程式知道这是加法的操作,
  所以你得到 10. 如果你打 "a"+"b",执行程式知道这是连接两个文字串, 所以你会
  得到 "ab". 但是若资料种类不对, 极有可能得到错误的结果. 例如: "5"+5,
  执行程式会把它当成都是文字串来相连, 所以你的到的结果是: "55". 如果你
  本来所要的答案是 10, 那你就得到了错误的答案了.
========================================================================

    修饰资料除了其「型态”外，还有一种修饰子，我们先把所有的关键字列出来：
void		如前述，只能用于函数，代表函数不传回任何值
int		整数，别的语言可能会分「长”「短”，这边一律是 32 位元
float		浮点数，大致上可以看成「实数”，因为有效位数问题，只能近似
		于实数，而不能说是实数。
string		字串，跟 C 不一样，C 是靠 '\0' 字元结尾，LPC 的字串「感觉”
		不到是以 '\0' 结尾。比较像是 Pascal 语言的方式。
object		物件，大概只有这个型态是「指标”了。在此提一下，在用 printf()
		印资料时，印物件型态的资料是用 %O <-- 不是零，是大写的 o
mapping		关联，又称对应。有点像阵列(事实上也可以用阵列实作出来)，后
		面有专门的讨论再仔细读吧！是 C 所没有的。
function	函数在 LPC 中比 C 复杂多了，也是看后面的讨论。
mixed		这个型态有点特殊，可以说成「不要检查我的型态”的意思，一个
		资料宣告成 mixed 时，就可以看成上述所有型态。最好用的是在
		函数传回值是好几种型态时，这点在 C 语言中很难表达。
阵列		阵列不是一个独立的型态，需结合上述的型态，宣告时用 * 接在上述
		宣告之后，如： int *arr;  就宣告了一个整数阵列。
== 底下是特殊修饰子 ==
varargs		这个只能用在函数修饰上，代表函数参数个数可能会变，换句话说，
		一般函数使用时，如果参数个数跟宣告的不一样(如原型)，就会产生
		错误讯息。
private		私有的，物件中 A 中如果定义了 private func() 的话，
		别的物件就不能呼叫 A 中的 func() 函数，即使是继承也一样。
		上述说法对变数也适用。
static		这个修饰子对变数跟函数效果不一样。
		对函数而言，跟 private 一样，对变数而言，表示物件用
		save_object() 存成档案时不会把 static 变数存进去，所以
		restore_object() 也不会改变该变数值。
public		公有的，一般而言，没宣告的函数就是 public, 但是在继承时，
		如果是 private 继承的话，没宣告 public 的函数就不会再被其他
		物件引用，而宣告成 public 的函数就可以被其他物件引用。
nomask		不可重新定义。也就是被宣告成 nomask 的函数，只能被其他物
		件引用，不能重新定义。



========================================================================
LPC Basics 的版权宣告：作者是 borg@hebron.connected.com.

                             LPC Basics
                     Written by Descartes of Borg
                            23 april 1993


                            介绍
               如何使用本手册与本手册内容简介

    我最近看过很多人在 USENET 上要求 LPC 手册. 此外, 在我的 MUD 上的巫师们
也都在抱怨没有 LPC 的说明手册的缺憾. 所以我决定亲自写有关 LPC 的手册. 在进
一步阅读之前, 你心里最好有一个底: LPC 是非常容易学的语言, 而且也确实也有它存在
的重要性. 我是在 1991 年开始玩 MUD 的,在一个月的时间里, created an unimpressive
area
and musician's guild on the original Bates College MUD called Orlith.
之后, 我搬去洛山矶一年内都没有接触到 MUD 或者任何电脑. 大约在 1992 年六月
我回到网际网路的世界, 而且当 Igor 的巫师. 同年九月, 我开始写 Nightmare 来
自己用, 后来决定把它公开是因为当时没有专属于 MudOS 的 mudlib(当然现在已经
有一堆架于 MudOS 的 mudlibs 了), 所以在一年内, 我写了大量的程式, 在一堆电脑科学
主修冲斥的环境下仍然保持着哲学主修的我,只想声明一件事: 你只要会log in 到一个
mud, 你就能了解 LPC 里用的程式. 本手册做了底下的基本假设:
你已经学会某些基本的 UNIX 命令, 如: ls, cd, mkdir, mv, rm, 等等, 以及
你知道怎么进入 MUD, 怎么使用 edit 编辑档案. 此外, 没有其他假设了.
假如你知道 C, 那你会发现 LPC 很像 C, 但是又不是 C.
如果你已经有模组化程式设计概念的话, 也许反而会造成你写 LPC 程式的一种
阻碍, 你必须克服这种阻碍. 如果你从未听过写过 C 程式语言(像我在 1991 年
五月时一样), 那么你只是有一些简单的东西不会, 如流程控制, 逻辑指令的操
作, 说穿了, 对 C 语言的了解并没有很大助益(反而有阻力), 因为一般 C 对
LPC 有用的地方满容易从头学起的.. 对于新手, 奉劝你照顺序读本手册.
每章的开头会有简短的说明, 之后会介绍该章的顺序, 再来才是该章的正题.
每节的最后会有简短的本章摘要说明, 通常都是那些希望你知道的事项.
Following that may or may not be some sidenotes relevant to the
subject at hand, but not necessary to its understanding.

假如你读了某一章, 确定你从头到尾都读过却还是不懂的话, 可以寄信给我.
因为, 很明显的, 我在那一章有了败笔, 所以我也希望能订正过来. 同样的,
章末的摘要如果发生类似情形也请寄信给我.
假如你的 mud 是架在 LP mud 上的话, 可以寄到 descartes@nightmare,
否则请寄到 borg@hebron.connected.com.

本手册的某些关键字:
driver-
这就是整个游戏(mud),也就是C.  It accepts incoming sockets
(links to other computers), 解释由 mudlib 定义的 LPC 程式, mud 中的物
件保持在记忆体中. 周期性的清掉记忆体中没用的物件等等事情.

mudlib-
定义你所连线进去的 LPC 程式集合.  driver 本身不是一个 game, 只是一
段程式, 允许你创造一个多使用者的环境, 你可以把 LPC 想成一般 C 语言
的编译程式, 而 mudlib 就像该编译程式的函式库(很粗略的比喻).
mudlib 定义常常被使用到的物件, 例如 /std/room.c 或 /std/user.c

area or castle:
一些由创造者造出来的物件, 通常使用 LPC 的重要特征--继承--来善用 mudlib
物件的特性(性质)来变成游戏中玩家所使用的特殊物件, 这些物件构成了整个
世界.

object:
一个物件可以是 房间, 武器, 生物, 玩家等等, 更重要的, 每一个有 .c 附
加档名的档案就是一个物件. 通常, 物件有不同的使用法, 以 /std/living.c
为例, 它们是由其他程式继承用的, 如 monster.c, user.c 等.
其它的方法就是称为复制, 意思是说, 把那个档的物件再载入一份到记忆体中.
