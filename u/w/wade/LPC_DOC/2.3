第二章  第三节：其他 LPC 叙述

    LPC 通常是以函数呼叫方式来执行各项工作，在此，函数种类简单分成三类：
driver 提供的 efuns, mudlib 在载入时就编译好的 simul_efun, 及在物件中定义
的 lfuns 等三类。其中最快的当然是 efuns, 但是因为 efuns 通常只提供基本功
能，而不提供各项安全检查等工作，所以我们会以同名称的 simul_efun 来重新写
过，最后，lfuns 通常是呼叫 simul_efun 或 efuns 来达成目的。

    上一节的例子中第七行，就是呼叫 write() 函数来达成「印出”讯息的目的，
函数里面的 "flag = " + flag + "\n" 则称之为「参数”。同一件事情有时并不止
有一个方式可以达到，例如 write(), 我们有一个功能更完善更强大的 printf()来
做同一件事，但是，可以想见的是，就印出字串讯息来说，printf() 比 write() 慢
得多了。同理，叙述不同的写法可能会影响程式执行效率，请小心。

    在此要稍微提出一点说明：上一节的例子里，create() 也是一个函数，函数中
也可以拥有函数，底下会对函数有更进一步的说明。

    至此先小结一下，一个叙述通常是：变数宣告、变数值的设定、函数的呼叫。
    事实上， create() 已经示范了一个函数使用范例，一对 { ... }  所括弧起来
的部分称之为「程式区块”，大抵上就由上述构成了叙述(当然还有其他的叙述型态)

    另外有一种称为前端处理的，我们会在叙述物件时加以比较说明。一般而言，
LPC 的前端处理跟 C 很像，如 #include, #if ... #elif ... #endif, #define 等等

    事实上一个 LPC 叙述是由一些称 token 的符号组成的，底下再略述有哪些元素：
    ．注解：一般是以 /* .... */ 夹注所要的说明，不过，MudOS 更支援 C++ 中
      的写法，以 // ..... 的方式。
    ．变数宣告
    ．变数设定值
    ．前端处理
    ．函数
    ．条件判断
    ．逻辑判断
    ．运算子
    ．回圈
    ．程式区块
