第一章 第一节：LPC/MudOS 简史

  欢迎进入 Mud 的世界，LPC 是因为 Mud 而产生的，LPC 是 Lars Pensj□为其 LPmud
所写出来类似 C 语言的简写。 Mud 是 Multiple User Dimension, Multiple User
 Dungeon, 或 Multiple User Dialogue 简称，简单的翻成中文(不见得正确)是多人
使用连线界面。在此要强调的是， LPmud 只是众多 mud 之一，两者并不等同的。 LPC
的语法是基于 C 所发展出来的应无庸置疑，例如 while 回圈，for 回圈，if 叙述，
switch 叙述，或像 sscanf() 函数，及 int 等资料型态均跟 C 语言十分相似，当然，
LPC 也提供了一些 C 语言没提供的资料型态，如 object (译注：这一点倒有点像 C++)，
及对应。LPC 大抵上用了跟 C 一样的语法来定义「函数”与变数宣告，但它虽类似 C
语言，还是有其相异之处，底下列举数端：

  ． C 语言的字串是字元阵列，而 LPC 虽可看成字元阵列，却独立成一种资料型态，
     这一点有点像 BASIC 语言，而且，字串可以直接用 + 运算元串接起来

        LPC 的下列叙述是合法的:

        string ack;
        ack = foo + bar;

        约相等于下列的 C 叙述:

        char *ack;
        ack = (char *)malloc(strlen(foo) + 1);
        strcpy(ack,foo);
        ack = (char *)realloc(strlen(ack) + strlen(bar) + 1);
        strcat(ack,bar);

  ． LPC 里没有 C 常见的 main() 当进入点，取代的是像 create() 函数
  ． LPC 里称系统函数(system call)为 efuns
  ． 上述的 efuns 是由称为 driver 的程式提供，而不是 C 函式库(C library)
  ． C 中的 malloc() 系列的函数，LPC 中以 allocate() 及 allocate_mapping() 代替
  ． LPC 中的记忆体从不明显的释放(deallocated, free), 通常是由 driver 以类似
     垃圾收集法(garbage collect) 来维持(注：变数值为 0 时大概就是释放记忆体)
  ． LPC 不像 C 是编译式语言，而有点介于编译式与解释式语言之间。
  ． LPC 也没有 C 中的 struct 与 union 两种资料型态，而 C 中的 -> 运算元在
     LPC 中是用来指示从别的物件呼叫函数的。
  ． LPC 提供对应(mapping)资料型态，这在 C 中也没提供。在一些经常的应用中，
     对应是更有效的资料型态(大部份可以用阵列作出相同功能)。
  ． LPC 的 sscanf() 也跟 C 的 sscanf() 不太一样(参数不是用指标，因为 LPC
     没有明显的指标)。

  上述只是初步介绍 LPC 与 C 的异同，本章旨在介绍 LPC 的背景，然后教导读者
在开发 LPC 程式时的一些基本规则。想要善用 LPC 语言的特性，首先最好能对资料
结构有概念，最好还能有一些演算法的知识，最佳学习方式就是用 LPC 来实作演算法。
当然，从实例中学习是不变的道理。如果读者对 C 已有了解，那当然是最好的了，
但这并不意味着只要会 C 就一定能驾驭 LPC, 况且，LPC 还含有一些基本的物件导向
程式语言的概念，再加上 LPC 存在的环境是那么特殊，所以，要对 LPC 操作自如，
恐怕不是看过本书就行了。但各位读者不用担心这件事，只要您能自己架设 LPmud
(如 MudOS, DGD, CD 等)，或至少在某个 Mud 中当个巫师，要学习 LPC 就不是难事了。

  本书的出发点是假设读者是对 C 尚不了解，对 LPC 也许只是听说过的人，因此，
如果您只想学习 Mud 的开发，那么，希望本书就能满足您的需求。当然，「做中学”
是学习程式语言最佳的方式。如果读者是想学 C 或 C++ 或纯粹的物件导向语言的话，
那么本书虽也有相关性，不过，请读者们能再多读读其他相关书籍。

  本书并非完整或深入的 LPC 参考书，更不是 Mud/LPmud 入门书，所以并不会深讨
 LPmud(或  MudOS 等)更深入的话题，如果可能的话，笔者也很希望能进一步教导各
位，但是希望这本书能起抛砖引玉的功用，让市面上出现更多探讨 Mud/MudOS/LPmud
等方面的书。那么，相信笔者也能因此受惠。
