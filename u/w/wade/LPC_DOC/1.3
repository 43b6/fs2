第一章  第三节：撰写 LPC 程式的基本常识

    要撰写 LPC 程式应该要从哪儿开始呢？首先要了解，LPC 的目的是在提供 Mud
程式写作的工具，而 Mud 不是只有 LPmud(及其他相容产品)一种而已，因此，对 Mud
您应该有基本的认识。其次，LPC 是在一个称为 driver 的介面上执行的程式语言，
底下先就所谓的 driver 做一番介绍(这也是由 MudOS v21 说明文件内翻译来的，
已获授权翻译并流通)：

=============================================================================
    MudOS 驱动程式本身是一个程式, (为了 LP mud, 用 C 写的) 它
提供了使 mud 成为可能的最低阶的支援, 驱动程式做了下列的事情:

0) 透过某个通讯阜的建立, 接受玩家从不同机器连线, 并且把这些连线对应到
   物件(以 tmi 为例, 是 /adm/daemons/logind.c)

1) 提供一组额外的系统函数, 称之为 efuns, 这些函数可以让所以物件呼叫.

2) 透过 new(物件档名) 或 clone_object(物件档名) 把 LPC 写成的档案载入
   记忆体中, 并且转换成较省空间的内部符号(一种中间档).

3) 解释(执行)这些以中间符号表示的物件, 其执行命令的方式如下:

   a) 驱动程式从通讯阜接受玩家的命令, 并呼叫相对应的函数(定义在某物件中).
      这些函数通常是由 add_action(函数名称, 命令名称) 把命令跟定义在物件中
      的函数对应起来. 驱动程式也会呼叫物件中特定的函数(通常是 efun), 如:
      init, create, clean_up 等等.
   b) 物件也可以透过 call_other(物件, 函数名称, 参数, ...) 来呼叫定义
      在其他物件上的函数, call_other() 的变形是: 物件->函数名称(参数, ...)

4) MudOS 驱动程式 至少做了下列事情:
   a) 提供 LPC 的编译器, 编译并载入物件.
   b) 允许多使用者同时连线, 并且管理记忆体与这些连线.
   c) 提供一堆系统函数, 称为 efun, 给 mud 中的所有物件使用.
=============================================================================

    由上述可知，LPC 是由 driver 所编译的(其实也可说是解译的，本书后面不再说明
编译或解译)，以 ESII mudlib 来说，要撰写 LPC 程式的话，读者要先申请当个「巫师”
(由 ESII mudlib 建立起来的其他 国内 mud 也是一样可以，或如前文所说的，您可自行
至 ESII 网站，在遵守 ESII mudlib 版权宣告下自行下载来架个 mud 也行)。如果您已
经是巫师了，那么要知道的东西就是一个巫师专用指令：update, 请在 mud 中自行 
help update 来看说明。此处是假设您已经会「编写”LPC 程式了，一般而言，你可以
用 mud 中提供的 edit 指令来编写，有些 mud 提供 像 me 这样的全萤幕编辑指令编写
LPC 程式(注：me 是由 Kenny@Broken.History 或 Kenny@EC 提供的，感谢他)。对大部
份用不惯的人来说，还有一招，就是用 ftp 的方式，也就是在你习惯的编辑器(如 
汉书或记事本等纯文字编辑器)先编辑好 LPC 程式，然后 ftp 到 mud 站上去(如果是
自己架的站，当然就直接拷贝过去了)。

    一般而言，LPC 程式的副档名都是 .c ，值得注意的是，因为一般 Mud 都是架在
Unix/Linux 上，所以要注意档名的大小写。

    底下提供一般 MudOS driver 所提供的编辑指令的说明(本说明来自狂想空间
 Fantasy Space)：
=============================================================================
    编辑一个档案, 可以用 "edit <file>",   例如: edit test.c

  一进 edit 之后是处于命令模式, 以冒号当一行的开头 (提示符号的意思)
  在命令模式你可以有很多命令可以用....后面一封会附
  此外, 除了命令模式, 还有输入模式, 输入模式当一行的开头

  命令模式   ------------------------->      输入模式
             a, A, c, i, I, o, O 等


  命令模式   <-------------------------   输入模式
                 在一行的开头打句点 ".'
                 就像在 post 要结束一样


  在输入模式下所有输入都当成本文
  要编辑档案可以在自己的电脑写好再 ftp  上来,
  利用 edit 来编辑则要注意两种模式的切换, 至于命令模式有哪些?

  =========  命 令 模 式 的 所 有 可 用 命 令 =========

  可以在命令模式下用 h 命令得到:

辅助讯息
  h       显示辅助讯息
          想得到更详细的辅助讯息请用 hc, 例如
  :hw       <-- 可以查 'w' 这个命令的详细说明
搜寻/取代
  /       往后搜寻一个 pattern
  ?       往前搜寻一个 pattern
  g       整体搜寻 pattern 并显示配对到的行
  s       搜寻与取代
  v       依据 pattern 在没配对到的行执行某些命令,请参考 'g'
显示
  =       显示目前的行号
  l       显示某范围的文件内容(包括控制字元)
  p       显示某范围的文件内容
  z       显示 20 行, 可以用 ./- 来控制方向
  Z       类似 'z', 但是是 40 行
输入/删除
  a       在本行后面开始插入文件
  A       类似 'a', 但是有 inverse autoindent mode
  c       改变现在所在的这一行 (取代掉)
  d       删除一行(或多行)
  i       在这行的前面开始插入文件(跟'a'不一样, 但是类似)
  I       indent the entire code (Qixx version 1.0)
  j       把底下一行连到现在这一行, 两行变一行
  m       把本行移到特定的行号去
  O       同 'i'
  o       同 'a'
  r       读进另一档到现有行的后面, 两档合并用
  t       拷贝某一行(或某些行)到特定的行号去, 请参考 'm'
档案控制
  e       不编辑目前的档案, 开始编辑另一档(如目前的档案已动过, 会失败)
  E       同 'e', 但是会强迫放弃已编辑的档
  f       显示或更改现有的档名
  q       离开 edit (如果该文件有被动过, 会失败)
  Q       强迫离开编辑本文件
  x       同时存档与离开编辑
  w       写入该档(或所指定的档名)  W       类似 'w', 但是是"附加"在已有的档后面, 不是完全取代掉
到某行
  k       用一个字元标记这一行(为了以后方便跳到这行) - 以后可以用 'a 跳到那行去
  :10       <-- 跳到第 10 行, 当然要按 enter 之后生效
系统设定
  n       显示行号或不要
  set     查询与设定系统的设定值

其他: ftp, wizcmds, wiz_init, edit_example

Written by wade@Fantasy.Space in Mon Sep 25 1995
=============================================================================
